// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

buildscript {
    repositories {
        maven {
            url 'https://maven-central.storage-download.googleapis.com/maven2/'
        }
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'java'

    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.google.cloud.tools.jib' version '3.4.2' // do not use v3.4.3
    id 'com.google.protobuf' version '0.9.4'
    id 'net.ltgt.errorprone' version '4.1.0'
}

repositories {
    maven {
        url 'https://maven-central.storage-download.googleapis.com/maven2/'
    }
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.errorprone.disableWarningsInGeneratedCode = true
}

group = 'com.google.examples.xds.greeter'
application {
    mainClass = "${group}.Main"
}

sourceSets {
    main {
        java {
            srcDir 'third_party/src/main/java'
        }
        proto {
            srcDir 'third_party/src/main/proto'
        }
        resources {
            srcDir 'third_party/src/main/resources'
        }
    }
    test {
        java {
            srcDir 'third_party/src/test/java'
        }
        proto {
            srcDir 'third_party/src/test/proto'
        }
        resources {
            srcDir 'third_party/src/test/resources'
        }
    }
}

// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
tasks.withType(Checkstyle) {
    config = resources.text.fromArchiveEntry(configurations.named('checkstyle').get().resolve().find { it.name.contains('checkstyle') },
            'google_checks.xml') // 'google_checks.xml' or 'sun_checks.xml'
    dependsOn tasks.verifyGoogleJavaFormat
    exclude 'io/grpc/examples/helloworld/*.java'
    group = 'Verification'
    ignoreFailures = true
    reports {
        html.required = false
        xml.required = false
    }
}

def errorProneCoreVersion = '2.36.0'
def grpcVersion = '1.69.0'
def gsonVersion = '2.11.0'
def jetbrainsAnnotationsVersion = '26.0.1'
def jettyVersion = '12.0.16'
def junitJupiterVersion = '5.11.3'
def junitVersion = '4.13.2'
def log4jVersion = '2.24.2'
def protobufVersion = '3.25.5' // v4.x is currently not backwards compatible and breaks gRPC
def slf4jVersion = '2.0.16'
def tomcatAnnotationsApiVersion = '6.0.53'

dependencies {
    implementation("com.google.code.gson:gson:${gsonVersion}")
    implementation("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation("io.grpc:grpc-services:${grpcVersion}")
    implementation("io.grpc:grpc-xds:${grpcVersion}") {
        exclude(module: 'commons-logging')
    }
    implementation("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")
    implementation("org.eclipse.jetty:jetty-server:${jettyVersion}")
    implementation("org.eclipse.jetty.http2:jetty-http2-server:${jettyVersion}")
    implementation("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
    implementation("org.slf4j:slf4j-jdk14:${slf4jVersion}")

    compileOnly("org.apache.tomcat:annotations-api:${tomcatAnnotationsApiVersion}")
    compileOnly("org.jetbrains:annotations:${jetbrainsAnnotationsVersion}")

    runtimeOnly("io.grpc:grpc-netty-shaded:${grpcVersion}")

    testImplementation(platform("org.junit:junit-bom:${junitJupiterVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.grpc:grpc-testing:${grpcVersion}")

    testCompileOnly("junit:junit:${junitVersion}")

    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}")

    errorprone("com.google.errorprone:error_prone_core:${errorProneCoreVersion}")
}

jar {
    manifest {
        attributes('Main-Class': "${application.mainClass.get()}",
                'Name': "${project.name}",
                'Build-Jdk-Spec': java.toolchain.getLanguageVersion(),
                'Specification-Title': 'Greeter gRPC server',
                'Specification-Vendor': 'Google LLC',
                'Implementation-Title': "${project.group}",
                'Implementation-Vendor': 'Google LLC',)
    }
    preserveFileTimestamps false // for reproducible builds
    reproducibleFileOrder true // for reproducible builds
}

jib {
    container {
        format = 'OCI' // default is 'Docker'
        labels = ['org.opencontainers.image.base.name'  : "${jib.from.image}",
                  'org.opencontainers.image.description': 'Greeter gRPC example service.',
                  'org.opencontainers.image.licenses'   : 'Apache-2.0',
                  'org.opencontainers.image.title'      : 'Greeter gRPC example service',
                  'org.opencontainers.image.vendor'     : 'Google LLC',]
        ports = ['50051']
    }
}

protobuf {
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}
tasks.withType(com.google.protobuf.gradle.GenerateProtoTask).configureEach {
    group = 'Protobuf'
}

test {
    reports {
        html.required = false
        junitXml.required = false
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    useJUnitPlatform()
}

// https://github.com/sherter/google-java-format-gradle-plugin
tasks.googleJavaFormat {
    description = 'Formats source code according to the Google Java Style Guide.'
    group = 'Formatting'
}
googleJavaFormat {
    toolVersion = '1.17.0'
    options style: 'GOOGLE' // 'GOOGLE' (default, 2 space indent) or 'AOSP' (4 space indent)
}
tasks.verifyGoogleJavaFormat {
    dependsOn tasks.googleJavaFormat
    description = 'Verifies that source code is formatted according to the Google Java Style Guide.'
    group = 'Formatting'
}
