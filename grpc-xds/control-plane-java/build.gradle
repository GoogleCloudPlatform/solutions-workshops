// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

buildscript {
    repositories {
        maven {
            url 'https://maven-central.storage-download.googleapis.com/maven2/'
        }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath('com.google.cloud.tools:jib-layer-filter-extension-gradle:0.3.0')
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'java'

    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id 'com.google.protobuf' version '0.9.4'
}

repositories {
    maven {
        url 'https://maven-central.storage-download.googleapis.com/maven2/'
    }
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

group = 'com.google.examples.xds.controlplane'
application {
    mainClass = "${group}.Main"
}

// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
tasks.withType(Checkstyle) {
    config = resources.text.fromArchiveEntry(
            configurations.named('checkstyle').get().resolve().find { it.name.contains('checkstyle') },
            'google_checks.xml') // 'google_checks.xml' or 'sun_checks.xml'
    dependsOn tasks.verifyGoogleJavaFormat
    group = 'Verification'
    ignoreFailures = true
    reports {
        html.required = false
        xml.required = false
    }
}

def grpcVersion = '1.61.0'
def javaControlPlaneVersion = '1.0.42'
def junitJupiterVersion = '5.10.1'
def kubernetesClientJavaVersion = '18.0.1'
def protobufVersion = '3.25.2'
def slf4jVersion = '2.0.11'

dependencies {
    implementation("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    implementation("io.envoyproxy.controlplane:api:${javaControlPlaneVersion}")
    implementation("io.envoyproxy.controlplane:cache:${javaControlPlaneVersion}")
    implementation("io.envoyproxy.controlplane:server:${javaControlPlaneVersion}")
    implementation("io.grpc:grpc-netty:${grpcVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation("io.grpc:grpc-services:${grpcVersion}")
    implementation("io.grpc:grpc-xds:${grpcVersion}") {
        exclude(module: 'commons-logging')
    }
    implementation("io.kubernetes:client-java:${kubernetesClientJavaVersion}")
    implementation("io.kubernetes:client-java-extended:${kubernetesClientJavaVersion}")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:2.22.1")
    implementation("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
    implementation("org.slf4j:slf4j-jdk14:${slf4jVersion}")
    implementation("org.snakeyaml:snakeyaml-engine:2.7")

    compileOnly("org.apache.tomcat:annotations-api:6.0.53")
    compileOnly("org.jetbrains:annotations:24.1.0")

    runtimeOnly("io.grpc:grpc-netty-shaded:${grpcVersion}")

    testImplementation(platform("org.junit:junit-bom:${junitJupiterVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.grpc:grpc-testing:${grpcVersion}")

    testCompileOnly("junit:junit:4.13.2")

    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}")
}

jar {
    manifest {
        attributes(
                'Main-Class': "${application.mainClass.get()}",
                'Name': "${project.name}",
                'Build-Jdk-Spec': java.toolchain.getLanguageVersion(),
                'Specification-Title': 'xDS control plane example',
                'Specification-Vendor': 'Google LLC',
                'Implementation-Title': "${project.group}",
                'Implementation-Vendor': 'Google LLC',
        )
    }
    preserveFileTimestamps false // for reproducible builds
    reproducibleFileOrder true // for reproducible builds
}

jib {
    container {
        format = 'OCI' // default is 'Docker'
        labels = [
                'org.opencontainers.image.base.name'  : "${jib.from.image}",
                'org.opencontainers.image.description': 'xDS control plane example.',
                'org.opencontainers.image.licenses'   : 'Apache-2.0',
                'org.opencontainers.image.title'      : 'xDS control plane example',
                'org.opencontainers.image.vendor'     : 'Google LLC',
        ]
        ports = ['50051']
    }
    pluginExtensions {
        // By default, Jib places files from the `src/main/resources` source
        // directory in the `/app/resources` directory in the container image.
        // This filter excludes files in `src/main/resources/config` from the
        // container image. The files are instead provided via ConfigMaps
        // mounted as volumes.
        // See `k8s/Kustomization` for how these files are added to ConfigMaps.
        pluginExtension {
            implementation = 'com.google.cloud.tools.jib.gradle.extension.layerfilter.JibLayerFilterExtension'
            configuration {
                filters {
                    filter {
                        glob = '/app/resources/config/**'
                    }
                }
            }
        }
    }
    // Make `skaffold dev` ignore some file paths, since files in these directories
    // are packaged as ConfigMaps external to the container image.
    skaffold {
        sync {
            excludes = ['src/main/resources/config/*']
        }
        watch {
            excludes = ['src/main/resources/config/*']
        }
    }
}

protobuf {
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}
tasks.withType(com.google.protobuf.gradle.GenerateProtoTask).configureEach {
    group = 'Protobuf'
}

test {
    reports {
        html.required = false
        junitXml.required = false
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    useJUnitPlatform()
}

// https://github.com/sherter/google-java-format-gradle-plugin
tasks.googleJavaFormat {
    description = 'Formats source code according to the Google Java Style Guide.'
    group = 'Formatting'
}
googleJavaFormat {
    toolVersion = '1.17.0'
    options style: 'GOOGLE' // 'GOOGLE' (default, 2 space indent) or 'AOSP' (4 space indent)
}
tasks.verifyGoogleJavaFormat {
    dependsOn tasks.googleJavaFormat
    description = 'Verifies that source code is formatted according to the Google Java Style Guide.'
    group = 'Formatting'
}
